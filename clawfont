#!/usr/bin/python3

import argparse
import configparser
import os
import os.path
import xml.etree.ElementTree as ET
from jinja2 import Template

DEFAULT_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ '

class Actions:
    def create_index(self, index_file, directory, author=None, license=None, abspath=False):
        author = author or input('Author: ')
        license = license or input('License: ')

        index = configparser.ConfigParser()
        index['font'] = {
            'author': author,
            'license': license,
            'abspath': abspath
        }

        index['charmap'] = {}
        counter = 0
        for filename in os.listdir(directory):
            if os.path.splitext(filename)[1] == '.svg':
                if abspath:
                    filepath = os.path.abspath(os.path.join(directory, filename))
                else:
                    filepath = os.path.join(directory, filename)
                index['charmap'][DEFAULT_CHARACTERS[counter]] = filepath
                counter += 1

        with open(index_file, 'w') as output_file:
            index.write(output_file)

    def update_index(self, index_file, directory, author=None, license=None):
        index = configparser.ConfigParser()
        index.read(index_file)

        index['font']['author'] = author or index['font']['author']
        index['font']['license'] = license or index['font']['license']

        counter = 0
        for filename in os.listdir(directory):
            if os.path.splitext(filename)[1] == '.svg':
                if index['font']['abspath'] == 'True':
                    filepath = os.path.abspath(os.path.join(directory, filename))
                else:
                    filepath = os.path.join(directory, filename)

                while DEFAULT_CHARACTERS[counter] in index['charmap'].keys() and counter < len(DEFAULT_CHARACTERS):
                    counter += 1

                if counter >= len(DEFAULT_CHARACTERS):
                    print('Not enought default characters.')
                    break

                if filepath not in index['charmap'].values():
                    index['charmap'][DEFAULT_CHARACTERS[counter]] = filepath

        with open(index_file, 'w') as output_file:
            index.write(output_file)

    def build_font(self, index_file, font_file):
        font_template = Template('''<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >
<svg>
<metadata>{{metadata}}</metadata>
<defs>
<font id="{{ font_id }}" horiz-adv-x="{{horiz_adv_x}}">
  <font-face
      font-family="{{ family }}"
      font-weight="{{ weight }}"
      font-style="{{ style }}"
      units-per-em="{{ units_per_em }}"
      cap-height="{{ cap_height }}"
      x-height="{{ x_height }}"
      ascent="{{ ascent }}"
      descent="{{ descent }}"
      alphabetic="{{ alphabetic }}"
      mathematical="{{ mathematical }}"
      ideographic="{{ ideographic }}"
      hanging="{{ hanging }}">
    <font-face-src>
      <font-face-name name="{{ font_face_name }}"/>
    </font-face-src>
  </font-face>
  <missing-glyph>{{ missing_glyph }}</missing-glyph>
  {% for glyph in glyphs %}
    <glyph unicode="{{ glyph.char }}">{{ glyph.svg }}</glyph>
  {% endfor %}
</font>
</defs></svg>
        ''')

        index = configparser.ConfigParser()
        index.read(index_file)

        glyphs = []
        for char, filename in index['charmap'].items():
            svgtree = ET.parse(filename)
            root = svgtree.getroot()
            children = root.getchildren()
            glyphs.append({'char': char, 'svg': ''.join(map(lambda x: ET.tostring(x, encoding="unicode"), children))})

        context = {
            'font_id': 'Font1',
            'horiz_adv_x': 1000,
            'family': 'Sans',
            'weight': 'normal',
            'style': 'normal',
            'units_per_em': 1000,
            'cap_height': 600,
            'x_height': 400,
            'ascent': 700,
            'descent': 300,
            'alphabetic': 0,
            'mathematical': 350,
            'ideographic': 400,
            'hanging': 500,
            'font_face_name': 'example',
            'missing_glyph': '',
            'glyphs': glyphs
        }
        open(font_file, 'w').write(font_template.render(**context))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='clawfont')
    subparsers = parser.add_subparsers(help='command help')

    parser_create_index = subparsers.add_parser('create-index', help='create a index file')
    parser_create_index.add_argument('--author', type=str, action='store')
    parser_create_index.add_argument('--license', type=str, action='store')
    parser_create_index.add_argument('--abspath', action='store_true')
    parser_create_index.add_argument('index_file', type=str, action='store')
    parser_create_index.add_argument('directory', type=str, action='store')
    parser_create_index.set_defaults(action='create-index')

    parser_update_index = subparsers.add_parser('update-index', help='update a index file')
    parser_update_index.add_argument('--author', type=str, action='store')
    parser_update_index.add_argument('--license', type=str, action='store')
    parser_update_index.add_argument('--abspath', action='store_true')
    parser_update_index.add_argument('index_file', type=str, action='store')
    parser_update_index.add_argument('directory', type=str, action='store')
    parser_update_index.set_defaults(action='update-index')

    parser_build_font = subparsers.add_parser('build-font', help='build font files')
    parser_build_font.add_argument('index_file', type=str, action='store')
    parser_build_font.add_argument('font_file', type=str, action='store')
    parser_build_font.set_defaults(action='build-font')

    args = parser.parse_args()
    actions = Actions()
    if args.action == 'create-index':
        actions.create_index(args.index_file, args.directory, args.author, args.license, args.abspath)
    elif args.action == 'update-index':
        actions.update_index(args.index_file, args.directory, args.author, args.license)
    elif args.action == 'build-font':
        actions.build_font(args.index_file, args.font_file)
